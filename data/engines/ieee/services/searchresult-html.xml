<service>
    <name>searchResult_{{pageNumber}}</name>
    <resources>
        <item>
            <name>response.body</name>
            <contentType>text/html</contentType>
        </item>
    </resources>
    <request> <!-- Specifies how to retrieve/access service -->
        <url>
            <!--http://ieeexplore.ieee.org/search/searchresult.jsp?newsearch=true&amp;queryText={{{queryText}}}&amp;pageNumber={{{pageNumber}}}-->
            http://ieeexplore.ieee.org/search/searchresult.jsp?action=search&amp;sortType=&amp;rowsPerPage=&amp;matchBoolean=true&amp;searchField=Search_All&amp;queryText={{{queryText}}}&amp;newsearch=true&amp;pageNumber={{{pageNumber}}}
        </url>
        <method>GET</method> <!-- HTTP Method: GET, POST, etc. -->
    </request>
    <response from="response.body">

        <meta>
            <pageNumber>{{pageNumber}}</pageNumber>

            <!-- number of results -->
            <count el=".results-returned" mode="script">
                <!-- e.g. extract 2349 from "2349 Results returned" -->
                el.text().match(/\d+/)[0]
            </count>

            <!-- CONTENT TYPE -->
            <categories el="#Content_Type-refinements > li" mode="list"> <!-- with mode="list" we keep all the selected elements (they are supposed to be 'equal') instead that taking only the first -->
                <item> <!-- Special semantics: a generic element of the list -->
                    <id mode="script">el.attr('id')</id> <!-- no 'el' defaults to ancestor el -->
                    <!-- here the script could be removed by setting mode="text" (see below) -->
                    <name el="span.refinement" mode="script">el.text().trim()</name>
                </item>
            </categories>

            <!-- PUBLICATION YEARS -->
            <years> <!-- an XML element without any spec does nothing, is just a way of defining the content structure to navigate -->
                <!-- in this case el is an input -->
                <!-- with mode="text" we extract text from the el, thus removing the need for a script and normalizing differences between elements (e.g. el.val() for input, el.text() for others).
                Text is also trimmed by default -->
                <first el="#text_startyear" mode="text" />
                <last el="#text_endyear" mode="text" />
            </years>

            <authors el="#Author-refinements > li" mode="list">
                <item>
                    <id mode="script">el.attr('id')</id>
                    <name el="span.refinement" mode="script">
                        <!-- get text from first text node -->
                        el.textNodes().get(0).text().trim()
                    </name>
                    <!-- Number of found articles published by this author -->
                    <count el=".refinement-count" mode="script">
                        <!-- e.g. extract '2' from (2) -->
                        el.text().match(/\d+/)[0]
                    </count>
                </item>
            </authors>

            <affiliations el="#Affiliation-refinements > li" mode="list">
                <item>
                    <id mode="script">el.attr('id')</id>
                    <name el="span.refinement" mode="script">
                        <!-- get text from first text node -->
                        el.textNodes().get(0).text().trim()
                    </name>
                    <!-- Number of found articles published by this author -->
                    <count el=".refinement-count" mode="script">
                        <!-- e.g. extract '2' from (2) -->
                        el.text().match(/\d+/)[0]
                    </count>
                </item>
            </affiliations>

            <!-- PUBLICATION TITLES -->
            <publications el="#Publication_Title-refinements > li" mode="list">
                <item>
                    <id mode="script">el.attr('id')</id>
                    <name el="span.refinement" mode="script">
                        <!-- get text from first text node -->
                        el.textNodes().get(0).text().trim()
                    </name>
                    <!-- Number of found articles published by this author -->
                    <count el=".refinement-count" mode="script">
                        <!-- e.g. extract '2' from (2) -->
                        el.text().match(/\d+/)[0]
                    </count>
                </item>
            </publications>

            <conferenceLocations el="#Conference_Location-refinements > li" mode="list">
                <item>
                    <id mode="script">el.attr('id')</id>
                    <name el="span.refinement" mode="script">
                        <!-- get text from first text node -->
                        el.textNodes().get(0).text().trim()
                    </name>
                    <!-- Number of found articles published by this author -->
                    <count el=".refinement-count" mode="script">
                        <!-- e.g. extract '2' from (2) -->
                        el.text().match(/\d+/)[0]
                    </count>
                </item>
            </conferenceLocations>
        </meta>

        <articles el="#search_results_form ul.Results > li" mode="list">
            <item>
                <id el=".article-option img" expand="true" mode="script">
                    <!-- when expand is true we can set further options on the parent element, such as condition (xml characteristic: we can't set them as attributes if their structure is 'complex') -->
                    <condition mode="script">
                        <!-- must evaluate to true to pass -->
                        el.attr('id').startsWith('save-to-project-')
                    </condition>
                    <value>
                        el.attr('id').match(/save-to-project-(\d+)/)[1]
                    </value>
                </id>

                <title el=".select input" mode="script">
                    <!-- input text has the format 'Select this article: article title' -->
                    var text = el.attr('title');
                    var search = ': ';
                    var start = text.indexOf(search);
                    if (start !== -1) text.substr(start + search.length);
                </title>

                <authors el="#preferredName" mode="script">el.attr('class')</authors>

                <abstract el="#abstract-1 > p" mode="script">
                    // Get the text content skipping the "View full abstract»" final text
                    // Note: when using the replace method, cast to JavaScript string
                    // to prevent ambiguity with Java method:
                    // http://www.mirthcorp.com/community/forums/showthread.php?t=235
                    // Note: "[\s\S]" means "any character including newlines"
                    var text = el.text();
                    new String(text).replace(/View full abstract»[\s\S]*/, '');
                </abstract>

                <!-- TODO -->
                <!-- Missing in result view, is in the article details -->
                <affiliations>
                </affiliations>

                <publication el="a" expand="true" mode="text">
                    <!-- when expand is true we can set further options on the parent element, such as condition (xml characteristic: we can't set them as attributes if their structure is 'complex') -->
                    <condition mode="script">
                        <!-- must evaluate to true to pass -->
                        el.attr('href').indexOf('RecentIssue.jsp') != -1
                    </condition>
                    <value />
                </publication>

                <doi el="a" expand="true" mode="text">
                    <condition mode="script">
                        el.attr('href').indexOf('doi.org') != -1
                    </condition>
                    <value />
                </doi>

                <year mode="script">
                    <!-- e.g. extract 2013 from "Publication Year: 2013" -->
                    el.text().match(/Publication Year:\s*(\d+)/)[1]
                </year>

                <pagesRange>
                    <startPage mode="script">
                      <!-- e.g. extract 71 from "Page(s): 71	- 76" -->
                      el.text().match(/Page\(s\):\s*(\d+)\s*-\s*(\d+)/)[1]
                    </startPage>
                    <endPage mode="script">
                      <!-- e.g. extract 76 from "Page(s): 71	- 76" -->
                      el.text().match(/Page\(s\):\s*(\d+)\s*-\s*(\d+)/)[2]
                    </endPage>
                </pagesRange>
            </item>
        </articles>

    </response>
</service>
